# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CodeGenAndTransformerApi
  # Validation Result class.
  class ValidationResultException < APIException
    # TODO: Write general description for this method
    # @return [Boolean]
    attr_accessor :success

    # TODO: Write general description for this method
    # @return [List of Message]
    attr_accessor :errors

    # TODO: Write general description for this method
    # @return [List of Message]
    attr_accessor :warnings

    # TODO: Write general description for this method
    # @return [List of Message]
    attr_accessor :messages

    # The constructor.
    # @param [String] The reason for raising an exception.
    # @param [HttpContext] The HttpContext of the API call.
    def initialize(reason, context)
      super(reason, context)
      hash = APIHelper.json_deserialize(@context.response.raw_body)
      unbox(hash)
    end

    # Populates this object by extracting properties from a hash.
    # @param [Hash] The deserialized response sent by the server in the
    # response body.
    def unbox(hash)
      @success = hash['Success']
      # Parameter is an array, so we need to iterate through it
      @errors = nil
      unless hash['Errors'].nil?
        @errors = []
        hash['Errors'].each do |structure|
          @errors << (Message.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      @warnings = nil
      unless hash['Warnings'].nil?
        @warnings = []
        hash['Warnings'].each do |structure|
          @warnings << (Message.from_hash(structure) if structure)
        end
      end
      # Parameter is an array, so we need to iterate through it
      @messages = nil
      unless hash['Messages'].nil?
        @messages = []
        hash['Messages'].each do |structure|
          @messages << (Message.from_hash(structure) if structure)
        end
      end
    end
  end
end
