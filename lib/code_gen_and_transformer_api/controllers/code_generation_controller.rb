# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CodeGenAndTransformerApi
  # CodeGenerationController
  class CodeGenerationController < BaseController
    @instance = CodeGenerationController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # The code generation endpoint. The response is a path to the generated zip
    # file relative to https://apimatic.io/
    # @param [String] name Required parameter: The name of the API being used
    # for code generation
    # @param [Format] format Required parameter: The format of the API
    # description to use for code generation
    # @param [Template] template Required parameter: The template to use for
    # code generation
    # @param [File] body Required parameter: The input file to use for code
    # generation
    # @param [Integer] dl Optional parameter: Optional
    # @return String response from the API call
    def using_file_as_string(name,
                             format,
                             template,
                             body,
                             dl = 0)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/codegen'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'name' => name,
        'format' => format,
        'template' => template,
        'dl' => dl,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'body' => body
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized: Access is denied due to invalid credentials.',
          _context
        )
      elsif _context.response.status_code == 412
        raise APIException.new(
          'Precondition Failed',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # The code generation endpoint. The response is a path to the generated zip
    # file relative to https://apimatic.io/
    # @param [Template] template Required parameter: The template to use for
    # code generation
    # @param [Format] format Required parameter: The format of the API
    # description to use for code generation
    # @param [String] name Required parameter: The name of the API being used
    # for code generation
    # @param [String] description_url Required parameter: The absolute public
    # Uri for an API description doucment
    # @param [Integer] dl Optional parameter: Optional
    # @return String response from the API call
    def using_url_as_string(template,
                            format,
                            name,
                            description_url,
                            dl = 0)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/codegen'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'template' => template,
        'format' => format,
        'name' => name,
        'descriptionUrl' => description_url,
        'dl' => dl,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized: Access is denied due to invalid credentials.',
          _context
        )
      elsif _context.response.status_code == 412
        raise APIException.new(
          'Precondition Failed',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # The code generation endpoint! Upload a file and convert it to the given
    # format. The API description format of uploaded file will be detected
    # automatically. The response is generated zip file as per selected
    # template.
    # @param [String] name Required parameter: The name of the API being used
    # for code generation
    # @param [Format] format Required parameter: The format of the API
    # description to use for code generation
    # @param [Template] template Required parameter: The template to use for
    # code generation
    # @param [File] body Required parameter: The input file to use for code
    # generation
    # @param [Integer] dl Optional parameter: Optional
    # @return Binary response from the API call
    def using_file_as_binary(name,
                             format,
                             template,
                             body,
                             dl = 1)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/codegen'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'name' => name,
        'format' => format,
        'template' => template,
        'dl' => dl,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'body' => body
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized: Access is denied due to invalid credentials.',
          _context
        )
      elsif _context.response.status_code == 412
        raise APIException.new(
          'Precondition Failed',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Download API description from the given URL and convert it to the given
    # format. The API description format of the provided file will be detected
    # automatically. The response is generated zip file as per selected
    # template.
    # @param [Template] template Required parameter: The template to use for
    # code generation
    # @param [Format] format Required parameter: The format of the API
    # description to use for code generation
    # @param [String] name Required parameter: The name of the API being used
    # for code generation
    # @param [String] description_url Required parameter: The absolute public
    # Uri for an API description doucment
    # @param [Integer] dl Optional parameter: Optional
    # @return Binary response from the API call
    def using_url_as_binary(template,
                            format,
                            name,
                            description_url,
                            dl = 1)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/codegen'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'template' => template,
        'format' => format,
        'name' => name,
        'descriptionUrl' => description_url,
        'dl' => dl,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized: Access is denied due to invalid credentials.',
          _context
        )
      elsif _context.response.status_code == 412
        raise APIException.new(
          'Precondition Failed',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Convert an API from the user's account using the API's [API Integration
    # Key](https://docs.apimatic.io/getting-started/manage-apis/#view-api-integr
    # ation-key). The response is generated zip file as per selected template.
    # > Note: This endpoint does not require Basic Authentication.
    # @param [String] apikey Required parameter: The API Key of the
    # pre-configured API
    # @param [Template] template Required parameter: The template to use for
    # code generation
    # @param [Integer] dl Optional parameter: Optional
    # @return Binary response from the API call
    def using_apikey_as_binary(apikey,
                               template,
                               dl = 1)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/codegen'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'apikey' => apikey,
        'template' => template,
        'dl' => dl,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized: Access is denied due to invalid credentials.',
          _context
        )
      elsif _context.response.status_code == 412
        raise APIException.new(
          'Precondition Failed',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # The code generation endpoint. The response is a path to the generated zip
    # file relative to https://apimatic.io/
    # > Note: This endpoint does not require Basic Authentication.
    # @param [String] apikey Required parameter: The API Key of the
    # pre-configured API
    # @param [Template] template Required parameter: The template to use for
    # code generation
    # @param [Integer] dl Optional parameter: Optional
    # @return String response from the API call
    def using_apikey_as_string(apikey,
                               template,
                               dl = 0)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/codegen'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'apikey' => apikey,
        'template' => template,
        'dl' => dl,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 401
        raise APIException.new(
          'Unauthorized: Access is denied due to invalid credentials.',
          _context
        )
      elsif _context.response.status_code == 412
        raise APIException.new(
          'Precondition Failed',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
