# This file was automatically generated by APIMATIC v2.0
# ( https://apimatic.io ).

module CodeGenAndTransformerApi
  # APITransformerController
  class APITransformerController < BaseController
    @instance = APITransformerController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Convert an API from the user's account using the API's [Api Integration
    # Key](https://docs.apimatic.io/getting-started/manage-apis/#view-api-integr
    # ation-key). The converted file is returned as the response.
    # > Note: This endpoint does not require Basic Authentication.
    # @param [FormatTransformer] format Required parameter: The API format to
    # convert to
    # @param [String] apikey Required parameter: Apikey of an already uploaded
    # API Description on APIMATIC
    # @return Binary response from the API call
    def using_apikey(format,
                     apikey)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/transform'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'format' => format,
        'apikey' => apikey,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ValidationResultException.new(
          'Bad Request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Download API description from the given URL and convert it to the given
    # format. The API description format of the provided file will be detected
    # automatically. The converted file is returned as the response.
    # @param [FormatTransformer] format Required parameter: The API format to
    # convert to
    # @param [String] description_url Required parameter: The URL where the API
    # description will be downloaded from
    # @return Binary response from the API call
    def using_url(format,
                  description_url)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/transform'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'format' => format,
        'descriptionUrl' => description_url,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ValidationResultException.new(
          'Bad Request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end

    # Upload a file and convert it to the given format. The API description
    # format of the uploaded file will be detected automatically. The converted
    # file is returned as the response.
    # @param [FormatTransformer] format Required parameter: The API format to
    # convert to
    # @param [File] file Required parameter: The input file to convert
    # @return Binary response from the API call
    def using_file(format,
                   file)
      # Prepare query url.
      _query_builder = Configuration.base_uri.dup
      _query_builder << '/transform'
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        'format' => format,
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder

      # Prepare form parameters.
      _parameters = {
        'file' => file
      }

      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        parameters: _parameters
      )
      BasicAuth.apply(_request)
      _context = execute_request(_request, binary: true)

      # Validate response against endpoint and global error codes.
      if _context.response.status_code == 400
        raise ValidationResultException.new(
          'Bad Request',
          _context
        )
      end
      validate_response(_context)

      # Return appropriate response type.
      _context.response.raw_body
    end
  end
end
