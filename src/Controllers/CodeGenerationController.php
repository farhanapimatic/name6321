<?php
/*
 * CodeGenAndTransformerAPILib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

namespace CodeGenAndTransformerAPILib\Controllers;

use CodeGenAndTransformerAPILib\APIException;
use CodeGenAndTransformerAPILib\APIHelper;
use CodeGenAndTransformerAPILib\Configuration;
use CodeGenAndTransformerAPILib\Models;
use CodeGenAndTransformerAPILib\Exceptions;
use CodeGenAndTransformerAPILib\Http\HttpRequest;
use CodeGenAndTransformerAPILib\Http\HttpResponse;
use CodeGenAndTransformerAPILib\Http\HttpMethod;
use CodeGenAndTransformerAPILib\Http\HttpContext;
use Unirest\Request;

/**
 * @todo Add a general description for this controller.
 */
class CodeGenerationController extends BaseController
{
    /**
     * @var CodeGenerationController The reference to *Singleton* instance of this class
     */
    private static $instance;

    /**
     * Returns the *Singleton* instance of this class.
     * @return CodeGenerationController The *Singleton* instance.
     */
    public static function getInstance()
    {
        if (null === static::$instance) {
            static::$instance = new static();
        }
        
        return static::$instance;
    }

    /**
     * The code generation endpoint. The response is a path to the generated zip file relative to https:
     * //apimatic.io/
     *
     * @param string  $name     The name of the API being used for code generation
     * @param string  $format   The format of the API description to use for code generation
     * @param string  $template The template to use for code generation
     * @param string  $body     The input file to use for code generation
     * @param integer $dl       (optional) Optional
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function usingFileAsString(
        $name,
        $format,
        $template,
        $body,
        $dl = 0
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/codegen';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'name'     => $name,
            'format'   => $format,
            'template' => $template,
            'dl'       => (null != $dl) ? $dl : 0,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'body'   => Request\Body::File($body)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request::buildHTTPCurlQuery($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized: Access is denied due to invalid credentials.', $_httpContext);
        }

        if ($response->code == 412) {
            throw new APIException('Precondition Failed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * The code generation endpoint. The response is a path to the generated zip file relative to https:
     * //apimatic.io/
     *
     * @param string  $template       The template to use for code generation
     * @param string  $format         The format of the API description to use for code generation
     * @param string  $name           The name of the API being used for code generation
     * @param string  $descriptionUrl The absolute public Uri for an API description doucment
     * @param integer $dl             (optional) Optional
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function usingUrlAsString(
        $template,
        $format,
        $name,
        $descriptionUrl,
        $dl = 0
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/codegen';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'template'       => $template,
            'format'         => $format,
            'name'           => $name,
            'descriptionUrl' => $descriptionUrl,
            'dl'             => (null != $dl) ? $dl : 0,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized: Access is denied due to invalid credentials.', $_httpContext);
        }

        if ($response->code == 412) {
            throw new APIException('Precondition Failed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * The code generation endpoint! Upload a file and convert it to the given format. The API description
     * format of uploaded file will be detected automatically. The response is generated zip file as per
     * selected template.
     *
     * @param string  $name     The name of the API being used for code generation
     * @param string  $format   The format of the API description to use for code generation
     * @param string  $template The template to use for code generation
     * @param string  $body     The input file to use for code generation
     * @param integer $dl       (optional) Optional
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function usingFileAsBinary(
        $name,
        $format,
        $template,
        $body,
        $dl = 1
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/codegen';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'name'     => $name,
            'format'   => $format,
            'template' => $template,
            'dl'       => (null != $dl) ? $dl : 1,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //prepare parameters
        $_parameters = array (
            'body'   => Request\Body::File($body)
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::POST, $_headers, $_queryUrl, $_parameters);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::post($_queryUrl, $_headers, Request::buildHTTPCurlQuery($_parameters));

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized: Access is denied due to invalid credentials.', $_httpContext);
        }

        if ($response->code == 412) {
            throw new APIException('Precondition Failed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Download API description from the given URL and convert it to the given format. The API description
     * format of the provided file will be detected automatically. The response is generated zip file as
     * per selected template.
     *
     * @param string  $template       The template to use for code generation
     * @param string  $format         The format of the API description to use for code generation
     * @param string  $name           The name of the API being used for code generation
     * @param string  $descriptionUrl The absolute public Uri for an API description doucment
     * @param integer $dl             (optional) Optional
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function usingUrlAsBinary(
        $template,
        $format,
        $name,
        $descriptionUrl,
        $dl = 1
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/codegen';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'template'       => $template,
            'format'         => $format,
            'name'           => $name,
            'descriptionUrl' => $descriptionUrl,
            'dl'             => (null != $dl) ? $dl : 1,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized: Access is denied due to invalid credentials.', $_httpContext);
        }

        if ($response->code == 412) {
            throw new APIException('Precondition Failed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * Convert an API from the user's account using the API's [API Integration Key](https://docs.apimatic.
     * io/getting-started/manage-apis/#view-api-integration-key). The response is generated zip file as per
     * selected template.
     * > Note: This endpoint does not require Basic Authentication.
     *
     * @param string  $apikey   The API Key of the pre-configured API
     * @param string  $template The template to use for code generation
     * @param integer $dl       (optional) Optional
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function usingApikeyAsBinary(
        $apikey,
        $template,
        $dl = 1
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/codegen';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'apikey'   => $apikey,
            'template' => $template,
            'dl'       => (null != $dl) ? $dl : 1,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized: Access is denied due to invalid credentials.', $_httpContext);
        }

        if ($response->code == 412) {
            throw new APIException('Precondition Failed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }

    /**
     * The code generation endpoint. The response is a path to the generated zip file relative to https:
     * //apimatic.io/
     * > Note: This endpoint does not require Basic Authentication.
     *
     * @param string  $apikey   The API Key of the pre-configured API
     * @param string  $template The template to use for code generation
     * @param integer $dl       (optional) Optional
     * @return string response from the API call
     * @throws APIException Thrown if API call fails
     */
    public function usingApikeyAsString(
        $apikey,
        $template,
        $dl = 0
    ) {

        //the base uri for api requests
        $_queryBuilder = Configuration::$BASEURI;
        
        //prepare query string for API call
        $_queryBuilder = $_queryBuilder.'/codegen';

        //process optional query parameters
        APIHelper::appendUrlWithQueryParameters($_queryBuilder, array (
            'apikey'   => $apikey,
            'template' => $template,
            'dl'       => (null != $dl) ? $dl : 0,
        ));

        //validate and preprocess url
        $_queryUrl = APIHelper::cleanUrl($_queryBuilder);

        //prepare headers
        $_headers = array (
            'user-agent'    => 'APIMATIC 2.0'
        );

        //set HTTP basic auth parameters
        Request::auth(Configuration::$basicAuthUserName, Configuration::$basicAuthPassword);

        //call on-before Http callback
        $_httpRequest = new HttpRequest(HttpMethod::GET, $_headers, $_queryUrl);
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnBeforeRequest($_httpRequest);
        }

        //and invoke the API call request to fetch the response
        $response = Request::get($_queryUrl, $_headers);

        $_httpResponse = new HttpResponse($response->code, $response->headers, $response->raw_body);
        $_httpContext = new HttpContext($_httpRequest, $_httpResponse);

        //call on-after Http callback
        if ($this->getHttpCallBack() != null) {
            $this->getHttpCallBack()->callOnAfterRequest($_httpContext);
        }

        //Error handling using HTTP status codes
        if ($response->code == 401) {
            throw new APIException('Unauthorized: Access is denied due to invalid credentials.', $_httpContext);
        }

        if ($response->code == 412) {
            throw new APIException('Precondition Failed', $_httpContext);
        }

        //handle errors defined at the API level
        $this->validateResponse($_httpResponse, $_httpContext);

        return $response->body;
    }
}
